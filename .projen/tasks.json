{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools projenrc .projenrc.ts",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "integ:aliased-port:assert": {
      "name": "integ:aliased-port:assert",
      "description": "assert the snapshot of integration test 'aliased-port'",
      "steps": [
        {
          "exec": "[ -d \"test/aliased-port.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'aliased-port'. Run 'projen integ:aliased-port:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/aliased-port.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/.tmp/aliased-port.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/aliased-port.integ.snapshot/ test/.tmp/aliased-port.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:aliased-port:deploy": {
      "name": "integ:aliased-port:deploy",
      "description": "deploy integration test 'aliased-port' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/.tmp/aliased-port.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/aliased-port.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' --require-approval=never -o test/.tmp/aliased-port.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/aliased-port.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/aliased-port.integ/deploy.cdk.out test/aliased-port.integ.snapshot"
        },
        {
          "spawn": "integ:aliased-port:destroy"
        }
      ]
    },
    "integ:aliased-port:destroy": {
      "name": "integ:aliased-port:destroy",
      "description": "destroy integration test 'aliased-port'",
      "steps": [
        {
          "exec": "cdk destroy --app test/aliased-port.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:aliased-port:snapshot": {
      "name": "integ:aliased-port:snapshot",
      "description": "update snapshot for integration test \"aliased-port\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/aliased-port.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/aliased-port.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:aliased-port:watch": {
      "name": "integ:aliased-port:watch",
      "description": "watch integration test 'aliased-port' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/aliased-port.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' -o test/.tmp/aliased-port.integ/deploy.cdk.out"
        }
      ]
    },
    "integ:all-service-addons:assert": {
      "name": "integ:all-service-addons:assert",
      "description": "assert the snapshot of integration test 'all-service-addons'",
      "steps": [
        {
          "exec": "[ -d \"test/all-service-addons.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'all-service-addons'. Run 'projen integ:all-service-addons:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/all-service-addons.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/.tmp/all-service-addons.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/all-service-addons.integ.snapshot/ test/.tmp/all-service-addons.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:all-service-addons:deploy": {
      "name": "integ:all-service-addons:deploy",
      "description": "deploy integration test 'all-service-addons' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/.tmp/all-service-addons.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/all-service-addons.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' --require-approval=never -o test/.tmp/all-service-addons.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/all-service-addons.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/all-service-addons.integ/deploy.cdk.out test/all-service-addons.integ.snapshot"
        },
        {
          "spawn": "integ:all-service-addons:destroy"
        }
      ]
    },
    "integ:all-service-addons:destroy": {
      "name": "integ:all-service-addons:destroy",
      "description": "destroy integration test 'all-service-addons'",
      "steps": [
        {
          "exec": "cdk destroy --app test/all-service-addons.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:all-service-addons:snapshot": {
      "name": "integ:all-service-addons:snapshot",
      "description": "update snapshot for integration test \"all-service-addons\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/all-service-addons.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/all-service-addons.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:all-service-addons:watch": {
      "name": "integ:all-service-addons:watch",
      "description": "watch integration test 'all-service-addons' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/all-service-addons.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' -o test/.tmp/all-service-addons.integ/deploy.cdk.out"
        }
      ]
    },
    "integ:assign-public-ip:assert": {
      "name": "integ:assign-public-ip:assert",
      "description": "assert the snapshot of integration test 'assign-public-ip'",
      "steps": [
        {
          "exec": "[ -d \"test/assign-public-ip.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'assign-public-ip'. Run 'projen integ:assign-public-ip:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/assign-public-ip.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/.tmp/assign-public-ip.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/assign-public-ip.integ.snapshot/ test/.tmp/assign-public-ip.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:assign-public-ip:deploy": {
      "name": "integ:assign-public-ip:deploy",
      "description": "deploy integration test 'assign-public-ip' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/.tmp/assign-public-ip.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/assign-public-ip.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' --require-approval=never -o test/.tmp/assign-public-ip.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/assign-public-ip.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/assign-public-ip.integ/deploy.cdk.out test/assign-public-ip.integ.snapshot"
        },
        {
          "spawn": "integ:assign-public-ip:destroy"
        }
      ]
    },
    "integ:assign-public-ip:destroy": {
      "name": "integ:assign-public-ip:destroy",
      "description": "destroy integration test 'assign-public-ip'",
      "steps": [
        {
          "exec": "cdk destroy --app test/assign-public-ip.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:assign-public-ip:snapshot": {
      "name": "integ:assign-public-ip:snapshot",
      "description": "update snapshot for integration test \"assign-public-ip\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/assign-public-ip.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/assign-public-ip.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:assign-public-ip:watch": {
      "name": "integ:assign-public-ip:watch",
      "description": "watch integration test 'assign-public-ip' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/assign-public-ip.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' -o test/.tmp/assign-public-ip.integ/deploy.cdk.out"
        }
      ]
    },
    "integ:custom-service-extension:assert": {
      "name": "integ:custom-service-extension:assert",
      "description": "assert the snapshot of integration test 'custom-service-extension'",
      "steps": [
        {
          "exec": "[ -d \"test/custom-service-extension.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'custom-service-extension'. Run 'projen integ:custom-service-extension:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/custom-service-extension.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/.tmp/custom-service-extension.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/custom-service-extension.integ.snapshot/ test/.tmp/custom-service-extension.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:custom-service-extension:deploy": {
      "name": "integ:custom-service-extension:deploy",
      "description": "deploy integration test 'custom-service-extension' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/.tmp/custom-service-extension.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/custom-service-extension.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' --require-approval=never -o test/.tmp/custom-service-extension.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/custom-service-extension.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/custom-service-extension.integ/deploy.cdk.out test/custom-service-extension.integ.snapshot"
        },
        {
          "spawn": "integ:custom-service-extension:destroy"
        }
      ]
    },
    "integ:custom-service-extension:destroy": {
      "name": "integ:custom-service-extension:destroy",
      "description": "destroy integration test 'custom-service-extension'",
      "steps": [
        {
          "exec": "cdk destroy --app test/custom-service-extension.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:custom-service-extension:snapshot": {
      "name": "integ:custom-service-extension:snapshot",
      "description": "update snapshot for integration test \"custom-service-extension\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/custom-service-extension.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/custom-service-extension.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:custom-service-extension:watch": {
      "name": "integ:custom-service-extension:watch",
      "description": "watch integration test 'custom-service-extension' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/custom-service-extension.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' -o test/.tmp/custom-service-extension.integ/deploy.cdk.out"
        }
      ]
    },
    "integ:imported-environment:assert": {
      "name": "integ:imported-environment:assert",
      "description": "assert the snapshot of integration test 'imported-environment'",
      "steps": [
        {
          "exec": "[ -d \"test/imported-environment.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'imported-environment'. Run 'projen integ:imported-environment:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/imported-environment.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/.tmp/imported-environment.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/imported-environment.integ.snapshot/ test/.tmp/imported-environment.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:imported-environment:deploy": {
      "name": "integ:imported-environment:deploy",
      "description": "deploy integration test 'imported-environment' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/.tmp/imported-environment.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/imported-environment.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' --require-approval=never -o test/.tmp/imported-environment.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/imported-environment.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/imported-environment.integ/deploy.cdk.out test/imported-environment.integ.snapshot"
        },
        {
          "spawn": "integ:imported-environment:destroy"
        }
      ]
    },
    "integ:imported-environment:destroy": {
      "name": "integ:imported-environment:destroy",
      "description": "destroy integration test 'imported-environment'",
      "steps": [
        {
          "exec": "cdk destroy --app test/imported-environment.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:imported-environment:snapshot": {
      "name": "integ:imported-environment:snapshot",
      "description": "update snapshot for integration test \"imported-environment\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/imported-environment.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/imported-environment.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:imported-environment:watch": {
      "name": "integ:imported-environment:watch",
      "description": "watch integration test 'imported-environment' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/imported-environment.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' -o test/.tmp/imported-environment.integ/deploy.cdk.out"
        }
      ]
    },
    "integ:multiple-environments:assert": {
      "name": "integ:multiple-environments:assert",
      "description": "assert the snapshot of integration test 'multiple-environments'",
      "steps": [
        {
          "exec": "[ -d \"test/multiple-environments.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'multiple-environments'. Run 'projen integ:multiple-environments:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/multiple-environments.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/.tmp/multiple-environments.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/multiple-environments.integ.snapshot/ test/.tmp/multiple-environments.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:multiple-environments:deploy": {
      "name": "integ:multiple-environments:deploy",
      "description": "deploy integration test 'multiple-environments' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/.tmp/multiple-environments.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/multiple-environments.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' --require-approval=never -o test/.tmp/multiple-environments.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/multiple-environments.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/multiple-environments.integ/deploy.cdk.out test/multiple-environments.integ.snapshot"
        },
        {
          "spawn": "integ:multiple-environments:destroy"
        }
      ]
    },
    "integ:multiple-environments:destroy": {
      "name": "integ:multiple-environments:destroy",
      "description": "destroy integration test 'multiple-environments'",
      "steps": [
        {
          "exec": "cdk destroy --app test/multiple-environments.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:multiple-environments:snapshot": {
      "name": "integ:multiple-environments:snapshot",
      "description": "update snapshot for integration test \"multiple-environments\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/multiple-environments.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/multiple-environments.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:multiple-environments:watch": {
      "name": "integ:multiple-environments:watch",
      "description": "watch integration test 'multiple-environments' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/multiple-environments.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' -o test/.tmp/multiple-environments.integ/deploy.cdk.out"
        }
      ]
    },
    "integ:publish-subscribe:assert": {
      "name": "integ:publish-subscribe:assert",
      "description": "assert the snapshot of integration test 'publish-subscribe'",
      "steps": [
        {
          "exec": "[ -d \"test/publish-subscribe.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'publish-subscribe'. Run 'projen integ:publish-subscribe:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/publish-subscribe.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/.tmp/publish-subscribe.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/publish-subscribe.integ.snapshot/ test/.tmp/publish-subscribe.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:publish-subscribe:deploy": {
      "name": "integ:publish-subscribe:deploy",
      "description": "deploy integration test 'publish-subscribe' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/.tmp/publish-subscribe.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/publish-subscribe.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' --require-approval=never -o test/.tmp/publish-subscribe.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/publish-subscribe.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/publish-subscribe.integ/deploy.cdk.out test/publish-subscribe.integ.snapshot"
        },
        {
          "spawn": "integ:publish-subscribe:destroy"
        }
      ]
    },
    "integ:publish-subscribe:destroy": {
      "name": "integ:publish-subscribe:destroy",
      "description": "destroy integration test 'publish-subscribe'",
      "steps": [
        {
          "exec": "cdk destroy --app test/publish-subscribe.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:publish-subscribe:snapshot": {
      "name": "integ:publish-subscribe:snapshot",
      "description": "update snapshot for integration test \"publish-subscribe\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/publish-subscribe.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/publish-subscribe.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:publish-subscribe:watch": {
      "name": "integ:publish-subscribe:watch",
      "description": "watch integration test 'publish-subscribe' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/publish-subscribe.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' -o test/.tmp/publish-subscribe.integ/deploy.cdk.out"
        }
      ]
    },
    "integ:snapshot-all": {
      "name": "integ:snapshot-all",
      "description": "update snapshot for all integration tests",
      "steps": [
        {
          "spawn": "integ:aliased-port:snapshot"
        },
        {
          "spawn": "integ:all-service-addons:snapshot"
        },
        {
          "spawn": "integ:assign-public-ip:snapshot"
        },
        {
          "spawn": "integ:custom-service-extension:snapshot"
        },
        {
          "spawn": "integ:imported-environment:snapshot"
        },
        {
          "spawn": "integ:multiple-environments:snapshot"
        },
        {
          "spawn": "integ:publish-subscribe:snapshot"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "if [ ! -z ${CI} ]; then rsync -a . .repo --exclude .git --exclude node_modules && rm -rf dist && mv .repo dist; else npx projen package-all; fi"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        },
        {
          "spawn": "package:java"
        },
        {
          "spawn": "package:python"
        },
        {
          "spawn": "package:dotnet"
        },
        {
          "spawn": "package:go"
        }
      ]
    },
    "package:dotnet": {
      "name": "package:dotnet",
      "description": "Create dotnet language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target dotnet"
        }
      ]
    },
    "package:go": {
      "name": "package:go",
      "description": "Create go language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target go"
        }
      ]
    },
    "package:java": {
      "name": "package:java",
      "description": "Create java language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target java"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true",
        "MAJOR": "2",
        "PRERELEASE": "alpha"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ:aliased-port:assert"
        },
        {
          "spawn": "integ:all-service-addons:assert"
        },
        {
          "spawn": "integ:assign-public-ip:assert"
        },
        {
          "spawn": "integ:custom-service-extension:assert"
        },
        {
          "spawn": "integ:imported-environment:assert"
        },
        {
          "spawn": "integ:multiple-environments:assert"
        },
        {
          "spawn": "integ:publish-subscribe:assert"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=eslint-import-resolver-typescript,eslint-plugin-import,jsii-diff,jsii-docgen,jsii-pacmak,jsii-rosetta,jsii,projen,ts-node,typescript"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk eslint-import-resolver-typescript eslint-plugin-import eslint jest-junit jest jsii-diff jsii-docgen jsii-pacmak jsii-rosetta jsii projen standard-version ts-jest ts-node typescript aws-cdk-lib constructs"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
